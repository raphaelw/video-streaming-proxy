#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('video-streaming-proxy:server');
var http = require('http');
const dgram = require('dgram');

/**
 * Create UDP Server for SSDP (Advertising/NOTIFY/M-SEARCH)
 */


const DEFAULT_SSDP_PORT = 1900; //1900;
const DEFAULT_SSDP_ADDR = "239.255.255.250";
const udp_server = dgram.createSocket({ type: 'udp4', reuseAddr: false });

udp_server.on('error', (err) => {
    console.log(`server error:\n${err.stack}`);
    udp_server.close();
});

udp_server.on('message', (msg, rinfo) => {
    console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);

    setTimeout(function (args) {
        const message = Buffer.from('Some bytes');
        udp_server.send(message, DEFAULT_SSDP_PORT, DEFAULT_SSDP_ADDR);
        console.log("Sent!");
    }, 1000);
});

udp_server.on('listening', () => {
    const address = udp_server.address();
    console.log(`server listening ${address.address}:${address.port}`);
});

udp_server.bind(DEFAULT_SSDP_PORT, function () {
    /* https://stackoverflow.com/a/43294234 */
    udp_server.setMulticastLoopback(true); /* NEEDED to allow broadcast packets on the network interface, NodeJS documentation has more info. */
    udp_server.setMulticastTTL(128); /* This is for sending not needed for recieving */
    udp_server.addMembership(DEFAULT_SSDP_ADDR); /* add to broadcast-IP UPNP range */
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
